==================== ðŸ§® Math Problems ====================

Problem                                | Best Structure
---------------------------------------|-----------------
Check if a number is even or odd       | if/else
Find the largest of three numbers      | if/elif/else
Print the multiplication table         | for loop
Calculate the factorial                | for loop / while loop
Sum all numbers from 1 to n            | for loop
Check if a number is prime             | for loop + break
Count how many digits are in a number  | while loop / regex
Reverse the digits of a number         | while loop
Divisible by both 3 and 5              | if
Generate first 10 Fibonacci numbers    | for loop

==================== ðŸ”¤ String Problems ==================

Problem                                | Best Structure
---------------------------------------|-----------------
Reverse a string                       | for loop / slicing
Check if string is a palindrome        | if + loop/slicing / regex
Count vowels in a string               | for loop / regex
Count words in a sentence              | for loop / regex
Remove all spaces                      | for loop / regex
Replace vowels with *                  | for loop + if / regex
Convert to uppercase (manual)          | for loop + if
Find the longest word                  | for loop / regex
Check if only digits                   | for loop + if / regex
Compare two strings (ignore case)      | if + .lower()

================= âœ… Boolean / Logic Problems =============

Problem                                | Best Structure
---------------------------------------|-----------------
Positive, negative, or zero            | if/elif/else
Check if year is leap year             | if/elif/else
Eligible to vote (age â‰¥ 18)            | if
Password valid (len â‰¥ 8)               | if / regex
Number between two numbers             | if
Three angles form a triangle           | if
Three sides form a triangle            | if
Multiple of 10                         | if
Weekday or weekend                     | if/elif/else
Same parity (even/odd)                 | if

================ ðŸ“¦ Object / List Problems ================

Problem                                | Best Structure
---------------------------------------|-----------------
Print all items in a list              | for loop
Find maximum in a list                 | for loop
Find minimum in a list                 | for loop
Sum of a list                          | for loop
Count occurrences in a list            | for loop / regex
Remove duplicates                      | for loop + new list
Sort list without .sort()              | nested for loops
Reverse a list                         | for loop / slicing
Merge two lists                        | for loop
Check if element exists in a list      | for loop + if / regex






Data Structures
â”‚
â”œâ”€â”€ Sequences
â”‚   â”œâ”€â”€ list        â†’ [1, 2, 3] (mutable, ordered)
â”‚   â”œâ”€â”€ tuple       â†’ (1, 2, 3) (immutable, ordered)
â”‚   â”œâ”€â”€ str         â†’ "hello"   (immutable, text sequence)
â”‚   â”œâ”€â”€ range       â†’ range(5)  (sequence generator)
â”‚   â”œâ”€â”€ array       â†’ array('i', [1,2,3]) (typed, compact numbers)
â”‚   â””â”€â”€ bytes / bytearray â†’ b"abc" (immutable / mutable byte sequences)
â”‚
â”œâ”€â”€ Sets
â”‚   â”œâ”€â”€ set         â†’ {1, 2, 3} (unique, unordered)
â”‚   â””â”€â”€ frozenset   â†’ frozenset([1,2,3]) (immutable set)
â”‚
â”œâ”€â”€ Mappings
â”‚   â””â”€â”€ dict        â†’ {"a": 1, "b": 2} (key â†’ value hash map)
â”‚
â”œâ”€â”€ Collections (specialized)
â”‚   â”œâ”€â”€ deque       â†’ deque([1,2,3]) (double-ended queue)
â”‚   â”œâ”€â”€ Counter     â†’ Counter("hello") (counts items)
â”‚   â”œâ”€â”€ defaultdict â†’ defaultdict(int) (auto default values)
â”‚   â”œâ”€â”€ OrderedDict â†’ OrderedDict() (insertion order + extras)
â”‚   â””â”€â”€ ChainMap    â†’ ChainMap(d1, d2) (combine multiple dicts)
â”‚
â”œâ”€â”€ Queues & Heaps
â”‚   â”œâ”€â”€ queue.Queue     â†’ FIFO queue (thread-safe)
â”‚   â”œâ”€â”€ queue.LifoQueue â†’ Stack (LIFO)
â”‚   â”œâ”€â”€ queue.PriorityQueue â†’ Priority-based
â”‚   â””â”€â”€ heapq (list-based min-heap utilities)
â”‚
â””â”€â”€ Numeric / Data Science (external libs)
    â”œâ”€â”€ NumPy ndarray     â†’ np.array([1,2,3]) (multi-d arrays)
    â””â”€â”€ Pandas Series/DataFrame â†’ Tabular data
